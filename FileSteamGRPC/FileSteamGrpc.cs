// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_steam.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Filesteam {
  public static partial class FileSteamService
  {
    static readonly string __ServiceName = "filesteam.FileSteamService";

    static readonly grpc::Marshaller<global::Filesteam.fileBuffer> __Marshaller_fileBuffer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Filesteam.fileBuffer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Filesteam.fileBufferResponse> __Marshaller_fileBufferResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Filesteam.fileBufferResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Filesteam.fileBuffer, global::Filesteam.fileBufferResponse> __Method_PushFile = new grpc::Method<global::Filesteam.fileBuffer, global::Filesteam.fileBufferResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PushFile",
        __Marshaller_fileBuffer,
        __Marshaller_fileBufferResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Filesteam.FileSteamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FileSteamService</summary>
    public abstract partial class FileSteamServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Filesteam.fileBufferResponse> PushFileAsync(grpc::IAsyncStreamReader<global::Filesteam.fileBuffer> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FileSteamService</summary>
    public partial class FileSteamServiceClient : grpc::ClientBase<FileSteamServiceClient>
    {
      /// <summary>Creates a new client for FileSteamService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FileSteamServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FileSteamService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FileSteamServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FileSteamServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FileSteamServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::Filesteam.fileBuffer, global::Filesteam.fileBufferResponse> PushFile(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PushFile(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Filesteam.fileBuffer, global::Filesteam.fileBufferResponse> PushFile(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PushFile, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FileSteamServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FileSteamServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FileSteamServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PushFile, serviceImpl.PushFileAsync).Build();
    }

  }
}
#endregion
